- content_for :head do
  = stylesheet_link_tag "new_structure/section/lite_catalog"
  %meta{:content => @chaordic_user, :name => "chaordic:user"}/
  %meta{property:"fb:app_id", content:"#{@facebook_app_id}"}

- content_for :footer do
  :javascript
    start_position = #{@search.range_values_for(:price)[:min] rescue 0};
    final_position = #{@search.range_values_for(:price)[:max] rescue 600};
  = javascript_include_tag 'section/lite_catalog'

- content_for :data_layer do
  = render "shared/data_layer/category", pixel_information: @pixel_information, catalog_products: @search.products

  - content_for(:after_body) do
    = javascript_include_tag "common/fb_like_button"

= cache @cache_key, expire_in: 25.minutes, raw: true do
  = render "shared/mkt_breadcrumb"
  = @category ? second_level_breadcrumb(url_prefix.gsub('/', '').capitalize, url_prefix, url_prefix.gsub('/', '').capitalize, Category.t(Category.with_name(@category)).pluralize, 'breadcrumb'): first_level_breadcrumb(url_prefix.gsub('/', '').capitalize)
  #catalog
    %aside
      = render("list_products/filters", search: @search, category: @category)
    - if header
      - if header.big_banner?
        .promo_catalog
          =link_to image_tag(header.big_banner, alt: header.alt_big_banner, title: header.alt_big_banner), header.link_big_banner
      - if header.small_banner?
        .banners_group
          %ul
            %li.big
              =link_to image_tag(header.medium_banner, alt: header.alt_medium_banner, title: header.alt_medium_banner), header.link_medium_banner
            %li.small
              =link_to image_tag(header.small_banner1, alt: header.alt_small_banner1, title: header.alt_medium_banner), header.link_small_banner1
            %li
              =link_to image_tag(header.small_banner2, alt: header.alt_small_banner2, title: header.alt_medium_banner), header.link_small_banner2

      - if header.text?
        .about_item
          %h2.title= header.title
          %span.summary
            = header.resume_title.html_safe
    #result
      - unless @search.has_any_filter_selected? || params[:cmp].present?
        / local onde o viewpersonalized será exibido
        .chaordic.viewpersonalized
        / local onde o purchasepersonalized será exibido
        / .chaordic.purchasepersonalized
        / local onde o mostpopular será exibido
        / .chaordic.mostpopular

      .fixed_filter
        .row.row_olooklet
          = render "list_products/ordenation_filters", search: @search, url_builder: @url_builder, category: @category
          - unless @category == 'bolsa'
            .size_top
              - if @category
                %p.title-category.roupa Qual seu tamanho?
                %ul.category-list
                  -size_list(@category,@search, @category[0].downcase).each do |text, amount|
                    %li{ :class => category_style_class(text)}= filter_link_to(@url_builder.add_filter(:size, text), format_size(text.chomp), @search.filter_selected?(:size, text.chomp)) unless text == "Único" && @category == "sapato"
              - else
                %p.title-category.roupa Roupas & Acessórios
                %ul.category-list
                  -size_list(["roupa","acessorio"],@search, "r").each do |text, amount|
                    %li{ :class => category_style_class(text)}= filter_link_to(@url_builder.add_filter(:size, text), format_size(text.chomp), @search.filter_selected?(:size, text.chomp))
                %br
                %p.title-category.sapatos Sapatos
                %ul.category-list
                  -size_list("sapato",@search, "s").each do |text, amount|
                    %li{ :class => category_style_class(text)}= filter_link_to(@url_builder.add_filter(:size, text), format_size(text.chomp), @search.filter_selected?(:size, text.chomp)) unless text == "Único"

      - if params[:controller] == 'olooklet'
        = render 'list_products/current_section', search: @search, category: @category

      %section.container_product
        %ul#products
          = render_highlighted_products_from(@campaign_products)
          = render "shared/searched_products", :products => @search.products, campaign_products: @campaign_products.products
        .loading

      - unless @hide_pagination
        .pagination
          = render "shared/nav_bar_pagination", search: @search, url_builder: @url_builder, link: lambda{ |hash| @url_builder.current_filters{|p| p.merge({por:params[:por]}).merge(hash)} }


- content_for :head do
  = stylesheet_link_tag "new_structure/section/brands"

  %meta{:content => @glasses ? "#{@glasses}" : "home/#{@search.filter_value("category").first}", :name => "chaordic:source"}/
  %meta{:content => @chaordic_user, :name => "chaordic:user"}/
  %meta{:content => @glasses ? "#{@glasses}" : @search.filter_value("category").first, :name => "chaordic:category"}/

- content_for :data_layer do
  =# render "shared/metrics/sociomantic/category"

- content_for :footer do
  :javascript
    start_position = #{@search.range_values_for(:price)[:min] rescue 0};
    final_position = #{@search.range_values_for(:price)[:max] rescue 600};
  = javascript_include_tag 'section/brands'
  = javascript_include_tag "section/load_thumbnail_images"
= render "shared/mkt_breadcrumb"
= cache @search.cache_key, expire_in: 30.minutes  do
  = brand_breadcrumbs_for(@brand.first) if @brand.any?
  #catalog
    = render "side_filters", search: @search

    #result
      - unless @search.has_any_filter_selected?
        / local onde o viewpersonalized será exibido
        .chaordic.viewpersonalized
        / local onde o purchasepersonalized será exibido
        .chaordic.purchasepersonalized
        / local onde o mostpopular será exibido
        .chaordic.mostpopular

      - if @brand = @brand.first
        - if @brand.header_image.present?
          %div.collections_header
            = image_tag(@brand.header_image, alt: @brand.header_image_alt, title: @brand.header_image_alt) if @brand

      = render "ordenation_filters", search: @search, url_builder: @url_builder

      %section.container_product
        %ul#products
          = render "shared/searched_products", :products => @search.products
        .loading
      = render "shared/antibounce_box", antibounce_box: @antibounce_box if @antibounce_box.present? && @antibounce_box.search.products.count > 0 && Setting.antibounce_enabled 

      .pagination
        = render "shared/nav_bar_pagination", search: @search, url_builder: @url_builder, link: lambda{ |hash| brand_path(params[:brand], @url_builder.current_filters.merge({por:params[:por]}).merge(hash)) }

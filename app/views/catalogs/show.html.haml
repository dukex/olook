- content_for :head do
  = stylesheet_link_tag "new_structure/section/lite_catalog"
  %meta{:content => @glasses ? "#{@glasses}" : "home/#{params["category"].to_s.titleize}", :name => "chaordic:source"}/
  %meta{:content => @chaordic_user, :name => "chaordic:user"}/
  %meta{:content => @glasses ? "#{@glasses}" : params["category"].to_s.titleize, :name => "chaordic:category"}/

- content_for :footer do
  :javascript
    start_position = #{@search.range_values_for(:price)[:min] rescue 0};
    final_position = #{@search.range_values_for(:price)[:max] rescue 600};
  = javascript_include_tag 'section/lite_catalog'

- content_for :data_layer do
  = render "shared/data_layer/category", pixel_information: @pixel_information, catalog_products: @search.products

= cache @cache_key, expire_in: 15.minutes do
  = first_level_breadcrumb(Category.t(Category.with_name(@category)).pluralize)
  #catalog
    %aside
      = render "filters", search: @search, category: @category
      - if @category
        .promo_brands
          = banner_for(@category, position: :sidebotton)

    .pagination.topo
      = render "shared/nav_bar_pagination", search: @search, url_builder: @url_builder, link: lambda{ |hash| catalog_path(@category, @url_builder.current_filters.merge({por:params[:por]}).merge(hash)) }
    #result
      - unless @search.has_any_filter_selected? || params[:cmp].present?
        / local onde o viewpersonalized será exibido
        .chaordic.viewpersonalized
        / local onde o purchasepersonalized será exibido
        / .chaordic.purchasepersonalized
        / local onde o mostpopular será exibido
        / .chaordic.mostpopular

      = render "ordenation_filters", search: @search, url_builder: @url_builder
      = render 'current_section', search: @search

      %section.container_product
        %ul#products
          - if @campaign_products && @campaign_products.products.any?
            - @campaign.product_ids.split('-').map { |pid| @campaign_products.products.find { |p| p.id.to_i == pid.to_i } }.compact.each do |cp|
              = render "shared/searched_product_item", :product => cp
            = render "shared/searched_products", :products => @search.products, campaign_products: @campaign_products.products
          - else
            = render "shared/searched_products", :products => @search.products
        .loading

      = render "shared/antibounce_box", antibounce_box: @antibounce_box if @antibounce_box.present? && @antibounce_box.search.products.count > 0 && Setting.antibounce_enabled

      .pagination
        = render "shared/nav_bar_pagination", search: @search, url_builder: @url_builder, link: lambda{ |hash| catalog_path(@category, @url_builder.current_filters.merge({por:params[:por]}).merge(hash)) }

      .banner
        = banner_for(@category, position: :botton)
  

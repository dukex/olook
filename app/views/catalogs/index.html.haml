- content_for :head do
  = stylesheet_link_tag "new_structure/section/lite_catalog"
  %meta{:content => @glasses ? "#{@glasses}" : "home/#{params["category"].to_s.titleize}", :name => "chaordic:source"}/
  %meta{:content => @chaordic_user, :name => "chaordic:user"}/
  %meta{:content => @glasses ? "#{@glasses}" : params["category"].to_s.titleize, :name => "chaordic:category"}/
  %meta{property:"fb:app_id", content:"#{@facebook_app_id}"}
  :javascript
    SOASTA = {};
    SOASTA.pg = "catalog";
    if(typeof BOOMR !== "undefined") {
      BOOMR.addVar("h.pg", SOASTA.pg);
    } 

- content_for :footer do
  :javascript
    start_position = #{@search.range_values_for(:price)[:min] rescue 0};
    final_position = #{@search.range_values_for(:price)[:max] rescue 600};
  = javascript_include_tag 'section/lite_catalog'
- content_for :data_layer do
  = render "shared/data_layer/category", pixel_information: @pixel_information, catalog_products: @search.products

= cache @cache_key, expires_in: 40.minutes do
  = first_level_breadcrumb(Category.t(Category.with_name(@category)).pluralize)
  #catalog
    %aside
      = render "filters", search: @search, category: @category
    - if header
      - if header.big_banner?
        .promo_catalog
          =link_to image_tag(header.big_banner, alt: header.alt_big_banner, title: header.alt_big_banner), header.link_big_banner
      - if header.small_banner?
        .banners_group
          %ul
            %li.big
              =link_to image_tag(header.medium_banner, alt: header.alt_medium_banner, title: header.alt_medium_banner), header.link_medium_banner
            %li.small
              =link_to image_tag(header.small_banner1, alt: header.alt_small_banner1, title: header.alt_medium_banner), header.link_small_banner1
            %li
              =link_to image_tag(header.small_banner2, alt: header.alt_small_banner2, title: header.alt_medium_banner), header.link_small_banner2

      - if header.text?
        .about_item
          %h1.title= header.title
          %span.summary
            = header.resume_title.html_safe
            %br
          %span.full
            = header.text_complement.html_safe
            %br
          =link_to (">> Tudo sobre #{header.title.downcase}"), "#", :class => "more_info_show"
          =link_to (">> Ocultar conteúdo"), "#", :class => "more_info_hide"
          / %fb:like{"href" => "http://#{Rails.env == 'production' ? "www" : "homolog"}.olook.com.br#{request.path}", "data-action" => "like", "layout" => "button_count", "send" => "false", "show-faces" => "false", "class" => "like", "width" => "100"}

    #result
      - unless @search.has_any_filter_selected? || params[:cmp].present?
        / local onde o viewpersonalized será exibido
        .chaordic.viewpersonalized
        / local onde o purchasepersonalized será exibido
        / .chaordic.purchasepersonalized
        / local onde o mostpopular será exibido
        / .chaordic.mostpopular

      .row{style: 'position:relative'}
        = render "ordenation_filters", search: @search, url_builder: @url_builder
        - unless @category == 'bolsa'
          .size_top
            %p.title-category Qual seu tamanho?
            %ul.category-list
              - size_list(@category, @search, @category[0].downcase).each do |text, amount|
                %li{ :class => category_style_class(text)}= filter_link_to(catalog_path(@category, @url_builder.add_filter(:size, text)), format_size(text.chomp), @search.filter_selected?(:size, text.chomp))
            
      = render 'current_section', search: @search

      %section.container_product
        %ul#products
          = render_highlighted_products_from(@campaign)
          = render "shared/searched_products", :products => @search.products, campaign_products: @campaign.products
        .loading

      .pagination
        = render "shared/nav_bar_pagination", search: @search, url_builder: @url_builder, link: lambda{ |hash| @search.current_filters {|_params| _params.merge({por:params[:por]}).merge(hash) }}

      .banner
        = banner_for(@category, position: :botton)


- content_for :head do
  = stylesheet_link_tag("new_structure/section/custom_url")
  = check_organic_url_section( collection: stylesheet_link_tag("new_structure/section/collection_themes"), brand: stylesheet_link_tag("new_structure/section/brands"), catalog: stylesheet_link_tag("new_structure/section/lite_catalog"))
- content_for :footer do
  :javascript
    start_position = #{@search.range_values_for(:price)[:min] rescue 0};
    final_position = #{@search.range_values_for(:price)[:max] rescue 600};
  = javascript_include_tag 'section/lite_catalog'
- content_for :data_layer do
  - content_for(:after_body) do
    = javascript_include_tag "common/fb_like_button"

= cache @cache_key, expires_in: 40.minutes do
  #catalog
    %aside
      = check_organic_url_section( collection: -> { render("collection_themes/menu", collection_theme_groups: @collection_theme_groups) }, |
        brand: -> { render("brands/side_filters", search: @search) }, |
        catalog: -> { render("catalogs/filters", search: @search, category: @category) } )

    - present 'Header', header: @custom_url do |header_presenter| 
      = header_presenter.show_header

    #result
      -if @category
        .row{style: 'position:relative'}
          = render "ordenation_filters", search: @search, url_builder: @url_builder
          - unless @category == 'bolsa' || @category == 'acessorio'
            .size_top
              %p.title-category Qual seu tamanho?
              %ul.category-list
                - filters_by('size', @search, use_fields: [:category]).reverse.each do |text, amount|
                  %li{ :class => category_style_class(text)}= filter_link_to(catalog_path(@category, @url_builder.add_filter(:size, text)), format_size(text.chomp), @search.filter_selected?(:size, text.chomp))
      %section.container_product
        %ul#products
          - if @custom_search && @custom_search.products.any?
            - @custom_url.product_list.to_s.split(/\D/).map { |pid| @custom_search.products.find { |p| p.id.to_i == pid.to_i } }.compact.each do |cp|
              = render "shared/searched_product_item", :product => cp
            = render "shared/searched_products", :products => @search.products, campaign_products: @custom_search.products
          - else
            = render "shared/searched_products", :products => @search.products
        .loading

      .pagination
        = render("shared/nav_bar_pagination", search: @search, url_builder: @url_builder, link: lambda{ |hash| @url_builder.current_filters{ |_p| _p.merge({por:params[:por]}).merge(hash) } })
